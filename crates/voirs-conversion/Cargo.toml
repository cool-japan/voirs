[package]
name = "voirs-conversion"
version = { workspace = true }
edition = { workspace = true }
authors = { workspace = true }
license = { workspace = true }
repository = { workspace = true }
homepage = { workspace = true }
documentation = "https://docs.rs/voirs-conversion"
keywords = ["voirs", "conversion", "voice-conversion", "real-time", "audio"]
categories = ["multimedia::audio", "science", "asynchronous"]
rust-version = { workspace = true }
description = "Real-time voice conversion system for VoiRS"

[dependencies]
# SciRS2 - Scientific computing abstractions
scirs2-core = { workspace = true }
scirs2-fft = { workspace = true }

# Core ML and tensor operations
candle-core = { workspace = true }
candle-nn = { workspace = true }

# Real-time audio processing
cpal = { workspace = true }
dasp = { workspace = true }

# Async and concurrency
tokio = { workspace = true }
async-trait = { workspace = true }
futures = { workspace = true }
async-stream = { workspace = true }
tokio-stream = { workspace = true }

# Serialization
serde = { workspace = true }
serde_json = { workspace = true }

# Error handling and utilities
anyhow = { workspace = true }
thiserror = { workspace = true }
tracing = { workspace = true }

# Math and random
fastrand = { workspace = true }
num_cpus = { workspace = true }

# Time and synchronization
parking_lot = { workspace = true }
crossbeam-utils = { workspace = true }
chrono = { workspace = true }

# Compression for cache optimization
flate2 = { workspace = true }

# HTTP client for IoT cloud connectivity
reqwest = { version = "0.12.23", default-features = false, features = ["json", "rustls-tls"], optional = true }

# VoiRS dependencies
voirs-acoustic = { workspace = true, optional = true }
voirs-cloning = { workspace = true, optional = true }
voirs-emotion = { workspace = true, optional = true }
voirs-spatial = { workspace = true, optional = true }

# WebAssembly dependencies
wasm-bindgen = { version = "0.2.104", optional = true }
wasm-bindgen-futures = { version = "0.4.54", optional = true }
js-sys = { version = "0.3.81", optional = true }
web-sys = { version = "0.3.81", optional = true, features = [
    "console",
    "AudioContext",
    "AudioContextState",
    "AudioBuffer",
    "AudioDestinationNode",
    "AudioNode",
    "GainNode",
    "ScriptProcessorNode",
    "AudioProcessingEvent",
    "Performance",
    "Window",
    "Document",
    "Navigator",
] }
# getrandom 0.3 renamed the former `js` feature to `wasm_js`.
# The old `js` feature caused a resolver error after cargo upgrade.
# If targeting wasm32-unknown-unknown, remember to also set:
#   RUSTFLAGS='--cfg getrandom_backend="wasm_js"'
# (The feature alone only makes the backend available.)
getrandom = { version = "0.3", features = ["wasm_js"], optional = true }

[dev-dependencies]
tokio-test = { workspace = true }
criterion = { workspace = true }
tempfile = "3.23"

[features]
default = ["real-time"]
real-time = []
acoustic-integration = ["voirs-acoustic"]
cloning-integration = ["voirs-cloning"]
emotion-integration = ["voirs-emotion"]
spatial-integration = ["voirs-spatial"]
gpu = []
cuda = ["candle-core/cuda"]
metal = ["candle-core/metal"]
streaming = ["real-time"]
wasm = ["wasm-bindgen", "wasm-bindgen-futures", "js-sys", "web-sys", "getrandom"]
iot = ["reqwest"]
all-integrations = ["acoustic-integration", "cloning-integration", "emotion-integration", "spatial-integration"]


[lints]
workspace = true
