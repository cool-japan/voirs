[package]
name = "voirs-ffi"
version.workspace = true
edition.workspace = true
authors.workspace = true
license.workspace = true
repository.workspace = true
homepage.workspace = true
documentation = "https://docs.rs/voirs-ffi"
keywords.workspace = true
categories = ["external-ffi-bindings", "multimedia::audio"]
rust-version.workspace = true
description = "C/Python FFI bindings for VoiRS speech synthesis"

[lib]
name = "voirs_ffi"
crate-type = ["cdylib", "staticlib", "rlib"]

[dependencies]
# Core VoiRS crates
voirs = { version = "0.1.0-alpha.1", path = "../.." }
voirs-sdk = { version = "0.1.0-alpha.1", path = "../voirs-sdk" }
voirs-g2p = { version = "0.1.0-alpha.1", path = "../voirs-g2p" }
voirs-acoustic = { version = "0.1.0-alpha.1", path = "../voirs-acoustic" }
voirs-vocoder = { version = "0.1.0-alpha.1", path = "../voirs-vocoder" }
voirs-recognizer = { version = "0.1.0-alpha.1", path = "../voirs-recognizer", optional = true }

# FFI utilities
libc.workspace = true

# Async runtime
tokio.workspace = true
futures = { workspace = true, optional = true }
futures-util = { workspace = true, optional = true }

# Serialization
serde.workspace = true
serde_json.workspace = true
serde_yaml = "0.9"
chrono = { version = "0.4", features = ["serde"] }

# Error handling
anyhow.workspace = true
thiserror.workspace = true

# Memory management
once_cell.workspace = true
backtrace.workspace = true

# Threading
parking_lot.workspace = true
num_cpus.workspace = true
flume.workspace = true
thread_local = "1.1"

# Additional dependencies for new modules
tempfile = "3.8"
winreg = { version = "0.52", optional = true }

# Logging
log.workspace = true
pyo3 = { workspace = true, features = ["extension-module"], optional = true }

# Platform-specific dependencies for memory detection
[target.'cfg(target_os = "linux")'.dependencies]
procfs = { version = "0.16", optional = true }
alsa = { version = "0.9", optional = true }
pulse = { version = "0.5", optional = true }
dbus = { version = "0.9", optional = true }

[target.'cfg(target_os = "macos")'.dependencies]
core-foundation = { version = "0.9", optional = true }
cpal = { version = "0.15", optional = true }
objc = { version = "0.2", optional = true }
objc-foundation = { version = "0.1", optional = true }

[target.'cfg(windows)'.dependencies]
windows = { version = "0.52", optional = true, features = [
    "Win32_System_ProcessStatus", 
    "Win32_Foundation",
    "Win32_System_Com",
    "Win32_Media_Audio",
    "Win32_Media_Audio_DirectSound",
    "Win32_Media_Audio_Endpoints",
    "Win32_System_Registry",
    "Win32_Media_Multimedia"
] }
winapi = { version = "0.3", optional = true, features = [
    "combaseapi", 
    "mmdeviceapi",
    "objbase",
    "winreg",
    "processthreadsapi",
    "wtypes",
    "oleauto",
    "unknwnbase",
    "guiddef"
] }

# Logging (optional for debugging)
tracing = { workspace = true, optional = true }
tracing-subscriber = { workspace = true, optional = true }

# Python bindings
numpy = { workspace = true, optional = true }

# Node.js bindings
napi = { version = "2.0", optional = true, features = ["async"] }
napi-derive = { version = "2.0", optional = true }

# WebAssembly bindings
wasm-bindgen = { version = "0.2", optional = true }
wasm-bindgen-futures = { version = "0.4", optional = true }
web-sys = { version = "0.3", optional = true, features = ["console", "AudioContext", "AudioBuffer"] }
js-sys = { version = "0.3", optional = true }
console_error_panic_hook = { version = "0.1", optional = true }

# Audio file I/O
hound.workspace = true
md5.workspace = true  # For FLAC MD5 signature generation
# NOTE: MP3 encoding implementation pending - using structured placeholder for now
# NOTE: FLAC encoding enhanced with proper file structure

[dev-dependencies]
tempfile.workspace = true
criterion = { version = "0.5", features = ["html_reports"] }

[[bench]]
name = "ffi_performance"
harness = false

[[bench]]
name = "cross_language_performance"
path = "benches/ffi/cross_language_performance.rs"
harness = false

[[bench]]
name = "throughput_benchmark"
harness = false

[features]
default = ["memory-detection", "dep:futures", "dep:futures-util"]
logging = ["dep:tracing", "dep:tracing-subscriber"]
python = ["dep:pyo3", "dep:numpy", "logging", "dep:futures", "dep:futures-util"]
nodejs = ["dep:napi", "dep:napi-derive"]
wasm = ["dep:wasm-bindgen", "dep:wasm-bindgen-futures", "dep:web-sys", "dep:js-sys", "dep:console_error_panic_hook"]
gpu = ["voirs-acoustic/gpu", "voirs-vocoder/gpu"]
memory-detection = []
recognition = ["dep:voirs-recognizer", "dep:futures", "dep:futures-util"]
python-recognition = ["python", "recognition"]
futures = ["dep:futures", "dep:futures-util"]

# Platform-specific features
windows-platform = ["dep:windows", "dep:winapi"]
macos-platform = ["dep:core-foundation", "dep:cpal", "dep:objc", "dep:objc-foundation"]
linux-platform = ["dep:procfs", "dep:alsa", "dep:pulse", "dep:dbus"]
platform-integration = ["windows-platform", "macos-platform", "linux-platform"]

[lints]
workspace = true
