# VoiRS Evaluation - Continuous Integration Pipeline
# 
# This GitHub Actions workflow provides comprehensive CI/CD automation
# including building, testing, benchmarking, and quality assurance.

name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: "-D warnings"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ============================================================================ 
  # Code Quality and Formatting
  # ============================================================================
  
  format:
    name: Code Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      
      - name: Check formatting
        run: cargo fmt --all -- --check

  clippy:
    name: Clippy Lints
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      
      - name: Setup cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-clippy-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-clippy-
      
      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  # ============================================================================
  # Build Testing (Multiple Platforms and Rust Versions)
  # ============================================================================

  build:
    name: Build (${{ matrix.os }}, ${{ matrix.rust }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta, nightly]
        exclude:
          # Exclude some combinations to reduce CI time
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust ${{ matrix.rust }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      
      - name: Setup cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.rust }}-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.rust }}-build-
            ${{ runner.os }}-${{ matrix.rust }}-
      
      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libasound2-dev
      
      - name: Build (default features)
        run: cargo build --verbose
      
      - name: Build (all features)
        run: cargo build --all-features --verbose
      
      - name: Build examples
        run: cargo build --examples --all-features
      
      - name: Build benchmarks
        run: cargo build --benches --all-features

  # ============================================================================
  # Comprehensive Testing
  # ============================================================================

  test:
    name: Tests (${{ matrix.os }}, ${{ matrix.rust }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, nightly]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust ${{ matrix.rust }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      
      - name: Setup cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.rust }}-test-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.rust }}-test-
            ${{ runner.os }}-${{ matrix.rust }}-
      
      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libasound2-dev
      
      - name: Run unit tests
        run: cargo test --lib --all-features
      
      - name: Run integration tests
        run: cargo test --test integration_tests --all-features
      
      - name: Run documentation tests
        run: cargo test --doc --all-features
      
      - name: Run all tests
        run: cargo test --all-features --verbose

  # ============================================================================
  # Feature Flag Testing
  # ============================================================================

  feature-tests:
    name: Feature Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        features:
          - "quality"
          - "pronunciation"
          - "comparison" 
          - "perceptual"
          - "python"
          - "r-integration"
          - "all-metrics"
          - ""  # No features
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Setup cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ubuntu-feature-${{ matrix.features }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ubuntu-feature-${{ matrix.features }}-
            ubuntu-feature-
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libasound2-dev
      
      - name: Install Python dependencies (for python feature)
        if: matrix.features == 'python'
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install numpy
      
      - name: Install R (for r-integration feature)
        if: matrix.features == 'r-integration'
        run: |
          sudo apt-get install -y r-base
          
      - name: Build with features
        run: |
          if [ -z "${{ matrix.features }}" ]; then
            cargo build --no-default-features
          else
            cargo build --features "${{ matrix.features }}"
          fi
      
      - name: Test with features
        run: |
          if [ -z "${{ matrix.features }}" ]; then
            cargo test --no-default-features
          else
            cargo test --features "${{ matrix.features }}"
          fi

  # ============================================================================
  # Performance and Benchmark Testing
  # ============================================================================

  benchmarks:
    name: Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Setup cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ubuntu-bench-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ubuntu-bench-
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libasound2-dev
      
      - name: Run benchmarks
        run: cargo bench --all-features
      
      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: target/criterion/

  # ============================================================================
  # Memory Testing
  # ============================================================================

  memory-tests:
    name: Memory Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Setup cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ubuntu-memory-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ubuntu-memory-
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libasound2-dev valgrind
      
      - name: Run memory tests
        run: |
          cargo build --all-features
          # Run memory tests with valgrind for memory leak detection
          cargo test --test memory_tests --all-features

  # ============================================================================
  # Security and Dependency Auditing
  # ============================================================================

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-audit
        run: cargo install cargo-audit
      
      - name: Run security audit
        run: cargo audit

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly
      
      - name: Install cargo-udeps
        run: cargo install cargo-udeps
      
      - name: Check unused dependencies
        run: cargo +nightly udeps --all-features

  # ============================================================================
  # Code Coverage
  # ============================================================================

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview
      
      - name: Setup cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ubuntu-coverage-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ubuntu-coverage-
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libasound2-dev
          
      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin
      
      - name: Generate coverage report
        run: |
          cargo tarpaulin --all-features --out xml --output-dir ./coverage/
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/cobertura.xml
          fail_ci_if_error: false

  # ============================================================================
  # Documentation Generation
  # ============================================================================

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Setup cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ubuntu-docs-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ubuntu-docs-
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libasound2-dev
      
      - name: Generate documentation
        run: cargo doc --all-features --no-deps
      
      - name: Deploy documentation (main branch only)
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc

  # ============================================================================
  # Release Preparation
  # ============================================================================

  release-check:
    name: Release Check
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Setup cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ubuntu-release-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ubuntu-release-
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libasound2-dev
      
      - name: Build release
        run: cargo build --release --all-features
      
      - name: Test release
        run: cargo test --release --all-features
      
      - name: Package crate
        run: cargo package --all-features

  # ============================================================================
  # Metric Validation and Quality Assurance
  # ============================================================================

  metric-validation:
    name: Metric Validation
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Setup cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ubuntu-metrics-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ubuntu-metrics-
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libasound2-dev python3 python3-pip r-base
          python3 -m pip install --upgrade pip numpy scipy
      
      - name: Run metric accuracy validation
        run: |
          cargo test --test metric_validation --all-features -- --nocapture
          
      - name: Validate PESQ implementation
        run: |
          cargo test test_pesq_accuracy --all-features -- --nocapture
          
      - name: Validate STOI implementation  
        run: |
          cargo test test_stoi_accuracy --all-features -- --nocapture
          
      - name: Validate MCD implementation
        run: |
          cargo test test_mcd_accuracy --all-features -- --nocapture
          
      - name: Cross-language validation
        run: |
          cargo test test_cross_language_evaluation --all-features -- --nocapture

  performance-regression:
    name: Performance Regression
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for performance comparison
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Setup cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ubuntu-perf-reg-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ubuntu-perf-reg-
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libasound2-dev
      
      - name: Run performance regression tests
        run: |
          cargo test --test performance_regression_monitoring --all-features -- --nocapture
          
      - name: Generate performance report
        run: |
          cargo run --example benchmark_regression_detection --all-features
          
      - name: Upload performance artifacts
        uses: actions/upload-artifact@v4
        with:
          name: performance-regression-report
          path: |
            performance_*.json
            benchmark_*.html

  quality-benchmarking:
    name: Quality Benchmarking
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Setup cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ubuntu-quality-bench-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ubuntu-quality-bench-
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libasound2-dev
      
      - name: Run quality benchmarks
        run: |
          cargo bench --bench evaluation_metrics --all-features
          cargo bench --bench critical_success_factors --all-features
          
      - name: Validate quality thresholds
        run: |
          cargo test test_quality_thresholds --all-features -- --nocapture
          
      - name: Generate quality report
        run: |
          cargo run --example comparative_analysis --all-features
          
      - name: Upload quality benchmarks
        uses: actions/upload-artifact@v4
        with:
          name: quality-benchmarks
          path: |
            target/criterion/
            quality_*.json
            comparison_*.html

  statistical-validation:
    name: Statistical Validation
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Setup cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ubuntu-stats-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ubuntu-stats-
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libasound2-dev r-base
      
      - name: Run statistical significance tests
        run: |
          cargo test --test statistical_significance_validation --all-features -- --nocapture
          
      - name: Validate correlation analysis
        run: |
          cargo test test_correlation_accuracy --all-features -- --nocapture
          
      - name: Run statistical benchmarks
        run: |
          cargo test --test simple_statistical_validation --all-features -- --nocapture
          
      - name: Generate statistical report
        run: |
          cargo run --example r_statistical_analysis --all-features || echo "R integration may require additional setup"

  # ============================================================================
  # Results Summary
  # ============================================================================

  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [format, clippy, build, test, feature-tests, metric-validation, performance-regression, quality-benchmarking, statistical-validation]
    if: always()
    
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.format.result }}" != "success" ]]; then
            echo "❌ Format check failed"
            exit 1
          fi
          if [[ "${{ needs.clippy.result }}" != "success" ]]; then
            echo "❌ Clippy check failed"
            exit 1
          fi
          if [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "❌ Build failed"
            exit 1
          fi
          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "❌ Tests failed"
            exit 1
          fi
          if [[ "${{ needs.feature-tests.result }}" != "success" ]]; then
            echo "❌ Feature tests failed"
            exit 1
          fi
          if [[ "${{ needs.metric-validation.result }}" != "success" ]]; then
            echo "❌ Metric validation failed"
            exit 1
          fi
          if [[ "${{ needs.performance-regression.result }}" != "success" ]]; then
            echo "❌ Performance regression tests failed"
            exit 1
          fi
          if [[ "${{ needs.quality-benchmarking.result }}" != "success" ]]; then
            echo "❌ Quality benchmarking failed"
            exit 1
          fi
          if [[ "${{ needs.statistical-validation.result }}" != "success" ]]; then
            echo "❌ Statistical validation failed"
            exit 1
          fi
          echo "✅ All CI checks passed including metric validation!"